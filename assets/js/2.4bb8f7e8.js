(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{58:function(a,e,i){"use strict";i.r(e);var t=i(0),s=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,e=a.$createElement,i=a._self._c||e;return i("div",{staticClass:"content"},[i("p",[a._v("设置用户：")]),i("pre",{pre:!0,attrs:{class:"language-bash"}},[i("code",[a._v("$ "),i("span",{attrs:{class:"token function"}},[a._v("git")]),a._v(" config --global user.name "),i("span",{attrs:{class:"token string"}},[a._v('"Your Name"')]),a._v("\n$ "),i("span",{attrs:{class:"token function"}},[a._v("git")]),a._v(' config --global user.email "email@example.com\n')])]),i("h3",{attrs:{id:"目录操作"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#目录操作","aria-hidden":"true"}},[a._v("#")]),a._v(" 目录操作")]),i("ul",[i("li",[a._v("创建一个空目录："),i("code",[a._v("bash mkdir <name>")])]),i("li",[a._v("进入目录："),i("code",[a._v("bash cd <name>")])]),i("li",[a._v("修改文件名："),i("code",[a._v("bash mv <oldName> <newName>")])]),i("li",[a._v("显示当前目录："),i("code",[a._v("bash pwd")])]),i("li",[a._v("显示当前目录下的文件名："),i("code",[a._v("bash ls")])]),i("li",[a._v("初始化目录（这个目录变成Git可以管理的仓库）："),i("code",[a._v("bash git init")])])]),i("h3",{attrs:{id:"基本提交"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#基本提交","aria-hidden":"true"}},[a._v("#")]),a._v(" 基本提交")]),i("ul",[i("li",[a._v("将文件添加到暂存库："),i("code",[a._v("bash git add <file>")])]),i("li",[a._v("将暂存库的文件提交到仓库："),i("code",[a._v("bash git commit -m '历史记录名'")])]),i("li",[a._v("修改最近一次提交的历史记录："),i("code",[a._v("bash git commit --amend")])]),i("li",[a._v("工作区此时的状态："),i("code",[a._v("bash git status")])]),i("li",[a._v("查看file具体修改的内容："),i("code",[a._v("bash git diff <file>")])]),i("li",[a._v("当提交时进入VIM界面时，操作命令为：i进入编辑模式；ESC退出编辑模式；wq保存并离开。")])]),i("h3",{attrs:{id:"查看某一分支的历史记录"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#查看某一分支的历史记录","aria-hidden":"true"}},[a._v("#")]),a._v(" 查看某一分支的历史记录")]),i("ul",[i("li",[a._v("查看历史记录："),i("code",[a._v("bash git log")])]),i("li",[a._v("查看简洁版历史记录："),i("code",[a._v("bash git log --pretty=oneline")])]),i("li",[a._v("每条log只显示一行,显示number条："),i("code",[a._v("bash git log --oneline --number")])]),i("li",[a._v("可以图形化地表示出分支合并历史："),i("code",[a._v("bash git log --oneline --graph")])]),i("li",[a._v("可以显示特定分支的log："),i("code",[a._v("bash git log branchname")])]),i("li",[a._v("可以查看在分支1,却不在分支2中的提交.^表示排除这个分支(Window下可能要给^branch2加上引号).："),i("code",[a._v("bash git log --oneline branch1 ^branch2")])]),i("li",[a._v("会显示出tag信息："),i("code",[a._v("bash git log --decorate")])]),i("li",[a._v("可以指定作者的提交历史："),i("code",[a._v("bash git log --author=[author name]")])]),i("li",[a._v("根据提交时间筛选log："),i("code",[a._v("bash git log --since --before --until --after")])]),i("li",[a._v("可以将merge的commits排除在外："),i("code",[a._v("bash git log --no-merges")])]),i("li",[a._v("根据commit信息过滤log："),i("code",[a._v("bash git log --grep  （git log --grep=keywords）")])]),i("li",[a._v("查看最近n次更新(-p展开每次提交的内容差异)："),i("code",[a._v("bash git log -p -<n>")])]),i("li",[a._v("列出所有最近n周内的提交："),i("code",[a._v("bash git log --since=<n>.weeks")])]),i("li",[a._v("使用图形化工具查阅提交历史："),i("code",[a._v("bash gitk")])])]),i("h3",{attrs:{id:"版本操作"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#版本操作","aria-hidden":"true"}},[a._v("#")]),a._v(" 版本操作")]),i("ul",[i("li",[a._v("退回到上一个版本："),i("code",[a._v("bash git reset --hard HEAD^")])]),i("li",[a._v("退回到commit_id版本："),i("code",[a._v("bash git reset --hard commit_id(可以只写前几句)")])]),i("li",[a._v("查看文件内容："),i("code",[a._v("bash cat <file>")])]),i("li",[a._v("查看命令历史："),i("code",[a._v("bash git reflog")])]),i("li",[a._v("查看工作区和版本库里面最新版本的区别："),i("code",[a._v("bash git diff HEAD -- <file>")])]),i("li",[a._v("工作区的修改全部撤销："),i("code",[a._v("bash git checkout -- <file>")])]),i("li",[a._v("缓存区的修改全部撤销："),i("code",[a._v("bash git reset HEAD <file>")])]),i("li",[a._v("删除文件："),i("code",[a._v("bash git rm <file>(删除以后需要提交此操作)")])])]),i("h3",{attrs:{id:"与远程联系"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#与远程联系","aria-hidden":"true"}},[a._v("#")]),a._v(" 与远程联系")]),i("ul",[i("li",[a._v("列出每个远程库的简短名字："),i("code",[a._v("bash git remote")])]),i("li",[a._v("显示对应的克隆地址："),i("code",[a._v("bash git remote -v")])]),i("li",[a._v("如有多个远程仓库将其全部列出："),i("code",[a._v("bash cd grit")])]),i("li",[a._v("创建SSH Key："),i("code",[a._v('bash ssh-keygen -t rsa -C "youremail@example.com"')])]),i("li",[a._v("把一个已有的本地仓库与GitHub仓库连接："),i("code",[a._v("bash git remote add origin git@github.com:用户名/库名.git")])]),i("li",[a._v("第一次推送master分支的所有内容："),i("code",[a._v("bash git push -u origin master（第一次需要-u，以后就可以把-u去掉）")])]),i("li",[a._v("推送最新修改："),i("code",[a._v("bash git push (远程仓库名) (分支名)")])]),i("li",[a._v("将一个远程GitHub仓库克隆到本地："),i("code",[a._v("bash git clone git@github.com:用户名/库名.git")])]),i("li",[a._v("添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用："),i("code",[a._v("bash git remote add [shortName] git@[url]/库名.git")])]),i("li",[a._v("将一个远程仓库克隆到本地："),i("code",[a._v("bash git clone git@网址:文件位置/库名.git")])]),i("li",[a._v("从远程仓库抓取数据到本地："),i("code",[a._v("bash git fetch [remote-name]")])]),i("li",[a._v("修改某个远程仓库在本地的简称："),i("code",[a._v("bash git remote rename <oldName> <newName>")])]),i("li",[a._v("移除本地仓库与对应的远端仓库的连接："),i("code",[a._v("bash git remote rm <本地name>")])]),i("li",[a._v("命令抓取数据合并到本地："),i("code",[a._v("bash git pull")])]),i("li",[a._v("查看某个远程仓库的详细信息："),i("code",[a._v("bash git remote show [remote-name]")])])]),i("h3",{attrs:{id:"分支"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#分支","aria-hidden":"true"}},[a._v("#")]),a._v(" 分支")]),i("ul",[i("li",[a._v("查看分支："),i("code",[a._v("bash git branch")])]),i("li",[a._v("查看各个分支最后一个提交对象的信息："),i("code",[a._v("bash git branch -v")])]),i("li",[a._v("查看已经与当前分支合并的分支："),i("code",[a._v("bash git branch --merged")])]),i("li",[a._v("查看尚未与当前分支合并的分支："),i("code",[a._v("bash git branch --no-merged")])]),i("li",[a._v("创建分支："),i("code",[a._v("bash git branch <name>")])]),i("li",[a._v("切换分支："),i("code",[a._v("bash git checkout <name>")])]),i("li",[a._v("创建+切换分支："),i("code",[a._v("bash git checkout -b <name>")])]),i("li",[a._v("合并某分支到当前分支："),i("code",[a._v("bash git merge <name>(fast forward)（分支记录里不会有记录，历史记录里也不会有）")])]),i("li",[a._v("合并某分支到当前分支："),i("code",[a._v("bash git merge --no-ff -m '历史记录' <name>(分支记录里有，历史记录里会有何时合并的)")])]),i("li",[a._v("删除分支："),i("code",[a._v("bash git branch -d <name>")])]),i("li",[a._v("强制性删除分支："),i("code",[a._v("bash git branch -D <name>")])]),i("li",[a._v("查看分支合并图："),i("code",[a._v("bash git log --graph")])])]),i("h3",{attrs:{id:"git栈缓存"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git栈缓存","aria-hidden":"true"}},[a._v("#")]),a._v(" git栈缓存")]),i("ul",[i("li",[a._v("备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中： "),i("code",[a._v("bash git stash")])]),i("li",[a._v("显示Git栈内的所有备份： "),i("code",[a._v("bash git stash list")])]),i("li",[a._v("删除储藏区已回复内容："),i("code",[a._v("bash git stash drop")])]),i("li",[a._v("从Git栈中读取最近一次保存的内容，恢复工作区的相关内容同时删掉Git栈中 部分："),i("code",[a._v("bash git stash pop")])]),i("li",[a._v("清空Git栈："),i("code",[a._v("bash git stash clear")])])]),i("h3",{attrs:{id:"标签"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#标签","aria-hidden":"true"}},[a._v("#")]),a._v(" 标签")]),i("ul",[i("li",[a._v("为HEAD新建一个标签，即为最新的提交记录："),i("code",[a._v("bash git tag <name>")])]),i("li",[a._v("为commit id新建一个标签： "),i("code",[a._v("bash git tag <name> commit id")])]),i("li",[a._v("可以指定标签信息："),i("code",[a._v('bash git tag -a <tagname> -m "blablabla..."')])]),i("li",[a._v("可以用PGP签名标签："),i("code",[a._v('bash git tag -s <tagname> -m "blablabla..."')])]),i("li",[a._v("查看所有标签："),i("code",[a._v("bash git tag")])]),i("li",[a._v("查看相应标签的版本信息："),i("code",[a._v("bash git show <name>")])]),i("li",[a._v("向远程推送一个本地标签："),i("code",[a._v("bash git push origin <tagname>")])]),i("li",[a._v("向远程推送全部未推送过的本地标签："),i("code",[a._v("bash git push origin --tags")])]),i("li",[a._v("可以删除一个本地标签："),i("code",[a._v("bash git tag -d <tagname>")])]),i("li",[a._v("可以删除一个远程标签："),i("code",[a._v("bash git push origin :refs/tags/<tagname>")])])])])}],!1,null,null,null);e.default=s.exports}}]);